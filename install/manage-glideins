#!/usr/bin/env python

import traceback
import sys,os,os.path,string,time
import getopt

STARTUP_DIR=os.path.abspath(sys.path[0])
sys.path.append(os.path.join(STARTUP_DIR,"../lib"))
sys.path.append(os.path.join(STARTUP_DIR,"./services"))

import common
import Configuration
import WMSCollector
import UserCollector
import Submit
import VOFrontend
import Factory
from Configuration import ConfigurationError
#-------------------------

global gProgramName
global gAction
global gDEBUG

#--------------------------------
def run_command(service,user,node,command):
  global gAction
  global gDEBUG
  hdr = "%s %s user(%s) node(%s)" %(gAction,service,user,node) 
  common.logit("\n############################################################")
  common.logit("## %s " % hdr)
  cmd = """ssh -l %s %s "%s" """ % (user,node,command)
  if gDEBUG:
    common.logit("Commands: %s" % cmd)
  os.system(cmd)
  common.logit("## %s " % hdr)
  common.logit("############################################################\n")
  os.system("sleep 3")

#--------------------------------
def apache(action):
  cmd1 = "/etc/init.d/httpd"

#--------------------------------
def wmscollector(service,action,inifile):
  obj = WMSCollector.WMSCollector(inifile)
  user = obj.unix_acct()
  if obj.privilege_separation() == "y":
    user = 'root'
  cmd1 = "source %s/condor.sh" % obj.condor_location()
  cmd2 = ""
  cmd3 = ""
  if action == "install":
     obj.install()
     return
  if action == "start":
    cmd2 = "%s %s" % (obj.initd_script(),action)
  if action == "stop":
    cmd2 = "%s %s" % (obj.initd_script(),action)
  if action == "status":
    cmd2 = "condor_status -any || (echo;echo 'Not running';echo) "
    cmd3 = "condor_q &>/dev/null && (echo;condor_q | tail -1;echo)" 
  cmds = "%s;%s;%s" % (cmd1,cmd2,cmd3)
  run_command(service,user,obj.node(),cmds)

#--------------------------------
def usercollector(service,action,inifile):
  obj = UserCollector.UserCollector(inifile)
  cmd1 = "source %s/condor.sh" % obj.condor_location()
  cmd2 = ""
  cmd3 = ""
  if action == "install":
     obj.install()
     return
  if action == "start":
    cmd2 = "%s %s" % (obj.initd_script(),action)
  if action == "stop":
    cmd2 = "%s %s" % (obj.initd_script(),action)
  if action == "status":
    cmd2 = "condor_status -any || (echo;echo 'Not running';echo)"
  cmds = "%s;%s" % (cmd1,cmd2)
  run_command(service,obj.unix_acct(),obj.node(),cmds)

#--------------------------------
def submit(service,action,inifile):
  obj = Submit.Submit(inifile)
  cmd1 = "source %s/condor.sh" % obj.condor_location()
  cmd2 = ""
  cmd3 = ""
  if action == "install":
     obj.install()
     return
  if action == "start":
    cmd2 = "%s %s" % (obj.initd_script(),action)
  if action == "stop":
    cmd2 = "%s %s" % (obj.initd_script(),action)
  if action == "status":
    cmd2 = "condor_status -any || (echo;echo 'Not running';echo)"
    cmd3 = "condor_q &>/dev/null && (echo;condor_q | tail -1;echo)" 
  cmds = "%s;%s;%s" % (cmd1,cmd2,cmd3)
  run_command(service,obj.unix_acct(),obj.node(),cmds)

#--------------------------------
def vofrontend(service,action,inifile):
  obj = VOFrontend.VOFrontend(inifile)
  cmd1 = "cd %s;source frontend.sh;cd %s" % (obj.install_location(),obj.frontend_dir())
  cmd2 = ""
  if action == "install":
     obj.install()
     return
  if action == "start":
    cmd2 = "./frontend_startup %s"  % action
  if action == "stop":
    cmd2 = "./frontend_startup %s"  % action
  if action == "status":
    cmd2 = """echo;./frontend_startup %s;echo"""  % (action)
  cmds = "%s;%s" % (cmd1,cmd2)
  run_command(service,obj.unix_acct(),obj.node(),cmds)

#--------------------------------
def factory(service,action,inifile):
  obj = Factory.Factory(inifile)
  cmd1 = "cd %s;source factory.sh;cd %s" % (obj.install_location(),obj.glidein_dir())
  cmd2 = ""
  if action == "install":
     obj.install()
     return
  if action == "create-entries":
     obj.get_new_config_entries()
     return
  if action == "start":
    cmd2 = "./factory_startup %s"  % action
  if action == "stop":
    cmd2 = "./factory_startup %s"  % action
  if action == "status":
    cmd2 = """echo;./factory_startup %s && (cd %s/tools; echo;echo ... Entries;./wmsTxtView.py Entries; echo;echo ... Sites;./wmsTxtView.py Sites; echo;echo ... Gatekeepers;./wmsTxtView.py Gatekeepers;echo)"""  % (action, obj.glidein_install_dir())

  cmds = "%s;%s" % (cmd1,cmd2)
  run_command(service,obj.unix_acct(),obj.node(),cmds)

#----------------
def find_services(inifile):
   """ Finds the services that can be installed on this unix node. """
   services = []
   cfg = Configuration.Configuration(inifile)
   sections = [ "WMSCollector", "Factory", "UserCollector", "Submit", "VOFrontend", ]
   for section in sections:
     if cfg.has_option(section,"node"):
       if cfg.option_value(section,"node") == os.uname()[1]:
         services.append(section.lower())
     else:
       common.logerr("ini file section(%s) does not contain a node option(%s)" % (section,"node"))

   if len(services) == 0:
       common.logerr("The ini file shows no services for this node: %s" % os.unmae()[1])

   common.ask_continue("The following services will be processed on this node:\n   %s\n... do you want to continue" % services)
   return services
         

#----------------
def process_request(service,action,inifile):
  if service == "wmscollector":
    wmscollector(service,action,inifile)
  elif service == "usercollector":
    usercollector(service,action,inifile)
  elif service == "submit":
    submit(service,action,inifile)
  elif service == "factory":
    factory(service,action,inifile)
  elif service == "vofrontend":
    vofrontend(service,action,inifile)
  else:
    common.logerr("Service(%s) not supported" % service)

#----------------
def usage(services):
  global gProgramName
  valid_services = ""
  for service in services:
    valid_services = valid_services + " " + service 
  msg = """
Usage: %(program)s --<action> <service>  --ini <ini_file>  <--debug>

  action: install, start, stop, status 
  services: %(services)s  
            all - can only be used with start/stop/status actions
  --debug:  When used with start/stop/status actions, it will
            display the series of commands used.

This process can be used to install, start, stop or check the status of 
the glidein services based on the configuration in the specified ini file.

The start/stop/status actions can be performed remotely providing the user 
has valid access to the other service's node via the .k5login of that user.
For these actions, this process ssh's into the services node thereby insuring 
a clean environment.

The install/install-node/create-entries can only be used on the node for that
service. 

 %(program)s --install-node --ini <ini_file>

This option  allows you to install all services for the node you are installing
on.  There are some limitation to this.

 %(program)s --create-entries --ini <ini_file>

This option can be used to select new glidein entry points after the
initial installation of a factory service.  If will walk you through the same 
question and answer process querying ReSS and BDII for resources.  It will then
create a file containing the entry elements for those selected.  This can then 
be merged with the existing Factory configuration file. 
""" % \
{ "program"  : gProgramName,
  "services" : valid_services,
}
  common.logit(msg)

##########################################
def main(argv):
  try:
    global gProgramName
    global gAction
    global gDEBUG
    gProgramName = argv[0]
    gAction = None
    gDEBUG = False
    inifile = ""
    arglist = [ "help", "debug", "start=", "stop=", "status=", "install=","ini=","create-entries","install-node" ]
    services = ["wmscollector","usercollector","factory","submit","vofrontend"]
    stop_order = ["vofrontend","submit","factory","usercollector","wmscollector"]
    opts, args = getopt.getopt(argv[1:], "", arglist)
    if len(opts) == 0:
      usage(services)
      common.logerr("No command line arguments specified")

    for o, a in opts:
      if o in ("--help"):
        usage(services)
        return 1

      if o in ("--debug"):
        gDEBUG = True
        continue

      if o in ("--ini"):
        inifile = a
        if not os.path.isfile(inifile):
          common.logerr("ini file does not exist: %s" % inifile)
        continue

      if o == "--install-node":
        gAction = o[2:]
        continue

      if o == "--create-entries":
        gAction = o[2:]
        continue

      if o in ("--start","--stop","--status","--install"):
        gAction = o[2:]
        if a == "all":
          if o == "--stop":
            services = stop_order
          continue

        if a in services:
          services = [a,]
          continue
        usage(services)
        common.logerr("Invalid service: %s" % a)
    #--- end of options --

    if gAction == None and len(inifile) == 0:
      usage(services)
      common.logerr("Missing all command line  arguments")

    if len(inifile) == 0:
      usage(services)
      common.logerr("--ini argument is required")

    if gAction == None:
      usage(services)
      common.logerr("Missing the 'action' argument")

    if gAction == "install-node":
      services = find_services(inifile)
      gAction = "install"

    if gAction == "create-entries":
      services = ["factory",]

    installed_services = 0
    for service in services:        
      try:
        installed_services = installed_services + 1
        common.logit("----- %s ----" % (service))
        process_request(service,gAction,inifile)
      except common.WMSerror:
        raise
      except:
        raise
      if len(services) <> installed_services:
        common.ask_continue("... continue with next service")
  
    common.logit("... requested action completed")

  except getopt.error, e:
    msg = e.__str__()
    common.logit("ERROR: Invalid command line argument: %s" % msg)
    usage(services)
    return 1
  except KeyboardInterrupt, e:
    print;print "Termminating at your request";return 1
  except EOFError, e:
    print;print "Termminating at your request";return 1
  except ConfigurationError, e:
    print;print "ConfigurationError ERROR(should not get these): %s"%e
    print traceback.print_exc()
    return 1
  except common.WMSerror:
#    print "WMS ERROR: uncaught execption. Contact support"
#    print traceback.print_exc()
    return 1
  except:
    print "PROGRAM ERROR: uncaught execption. Contact support"
    print traceback.print_exc()
    return 1
  return 0


#--------------------------
if __name__ == '__main__':
  sys.exit(main(sys.argv))

