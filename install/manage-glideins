#!/usr/bin/env python

import traceback
import sys,os,os.path,string,time
import socket
import getopt

STARTUP_DIR=os.path.abspath(sys.path[0])
sys.path.append(os.path.join(STARTUP_DIR,"../lib"))
sys.path.append(os.path.join(STARTUP_DIR,"./services"))

import common
import Configuration
import WMSCollector
import UserCollector
import Submit
import VOFrontend
import Factory
from Configuration import ConfigurationError
#-------------------------

global gProgramName
global gAction
global gSSH

#--------------------------------
def run_command(service,user,node,command):
  global gAction
  global gSSH
  cmd = ""
  if gSSH:
    cmd = """ssh -l %s %s "%s" """ % (user,node,command)
  else:
    common.validate_hostname(node,"Either login there or use the --ssh option.")
    cmd = """%s""" % (command)
  hdr = "%s %s user(%s) node(%s)" %(gAction,service,user,node) 
  common.logit("\n############################################################")
  common.logit("## %s " % hdr)
  common.logit("Commands: %s" % cmd)
  os.system(cmd)
  common.logit("## %s " % hdr)
  common.logit("############################################################\n")
  os.system("sleep 3")

#--------------------------------
def apache(action):
  cmd1 = "/etc/init.d/httpd"

#--------------------------------
def wmscollector(service,action,inifile):
  obj = WMSCollector.WMSCollector(inifile)
  user = obj.username()
  if obj.privilege_separation() == "y":
    user = 'root'
  cmd = "source %s/condor.sh" % obj.condor_location()
  if action == "install":
     obj.install()
     return
  if action == "start":
    cmd += "; %s %s" % (obj.initd_script(),action)
  elif action == "stop":
    cmd += "; %s %s" % (obj.initd_script(),action)
  elif action == "status":
    cmd += "; condor_status -any || (echo;echo 'Not running';echo) "
    cmd += "; condor_q &>/dev/null && (echo;condor_q | tail -1;echo)" 
  else:
    common.logerr("Invalid command line option for this service: %s" % action)
  run_command(service,user,obj.hostname(),cmd)

#--------------------------------
def usercollector(service,action,inifile):
  obj = UserCollector.UserCollector(inifile)
  cmd = "source %s/condor.sh" % obj.condor_location()
  if action == "install":
     obj.install()
     return
  if action == "start":
    cmd += "; %s %s" % (obj.initd_script(),action)
  elif action == "stop":
    cmd += "; %s %s" % (obj.initd_script(),action)
  elif action == "status":
    cmd += "; condor_status -any || (echo;echo 'Not running';echo)"
  else:
    common.logerr("Invalid command line option for this service: %s" % action)
  run_command(service,obj.username(),obj.hostname(),cmd)

#--------------------------------
def submit(service,action,inifile):
  obj = Submit.Submit(inifile)
  cmd = "source %s/condor.sh" % obj.condor_location()
  if action == "install":
     obj.install()
     return
  if action == "start":
    cmd += "; %s %s" % (obj.initd_script(),action)
  elif action == "stop":
    cmd += "; %s %s" % (obj.initd_script(),action)
  elif action == "status":
    cmd += "; condor_status -any || (echo;echo 'Not running';echo)"
    cmd += "; condor_q &>/dev/null && (echo;condor_q | tail -1;echo)" 
  else:
    common.logerr("Invalid command line option for this service: %s" % action)
  run_command(service,obj.username(),obj.hostname(),cmd)

#--------------------------------
def vofrontend(service,action,inifile):
  obj = VOFrontend.VOFrontend(inifile)
  cmd = "cd %s;source frontend.sh;cd %s" % (obj.install_location(),obj.frontend_dir())
  if action == "install":
     obj.install()
     return
  if action == "create-group":
     obj.get_new_config_group()
     return
  if action == "start":
    cmd += "; ./frontend_startup %s"  % action
  elif action == "stop":
    cmd += "; ./frontend_startup %s"  % action
  elif action == "status":
    cmd += """; echo;./frontend_startup %s;echo"""  % (action)
  else:
    common.logerr("Invalid command line option for this service: %s" % action)
  run_command(service,obj.username(),obj.hostname(),cmd)

#--------------------------------
def factory(service,action,inifile):
  obj = Factory.Factory(inifile)
  cmd = "cd %s;source factory.sh;cd %s" % (obj.install_location(),obj.glidein_dir())
  if action == "install":
     obj.install()
     return
  if action == "create-entries":
     obj.get_new_config_entries()
     return
  if action == "start":
    cmd += "; ./factory_startup %s"  % action
  elif action == "stop":
    cmd += "; ./factory_startup %s"  % action
  elif action == "status":
    cmd += """; echo;./factory_startup %s && (cd %s/tools; echo;echo ... Entries;./wmsTxtView.py Entries; echo;echo ... Sites;./wmsTxtView.py Sites; echo;echo ... Gatekeepers;./wmsTxtView.py Gatekeepers;echo)"""  % (action, obj.glidein_install_dir())
  else:
    common.logerr("Invalid command line option for this service: %s" % action)
  run_command(service,obj.username(),obj.hostname(),cmd)

#----------------
def find_services(inifile):
   """ Finds the services that can be installed on this unix node. """
   services = []
   cfg = Configuration.Configuration(inifile)
   sections = [ "WMSCollector", "Factory", "UserCollector", "Submit", "VOFrontend", ]
   for section in sections:
     if cfg.has_option(section,"hostname"):
       if cfg.option_value(section,"hostname") == os.uname()[1]:
         services.append(section.lower())
     else:
       common.logerr("ini file section(%s) does not contain a hostname option(%s)" % (section,"hostname"))

   if len(services) == 0:
       common.logerr("The ini file shows no services for this hostname: %s" % os.uname()[1])

   common.ask_continue("The following services will be processed on this node:\n   %s\n... do you want to continue" % services)
   return services
         

#----------------
def process_request(service,action,inifile):
  if service == "wmscollector":
    wmscollector(service,action,inifile)
  elif service == "usercollector":
    usercollector(service,action,inifile)
  elif service == "submit":
    submit(service,action,inifile)
  elif service == "factory":
    factory(service,action,inifile)
  elif service == "vofrontend":
    vofrontend(service,action,inifile)
  else:
    common.logerr("Service(%s) not supported" % service)

#----------------
def usage(services):
  global gProgramName
  valid_services = ""
  for service in services:
    valid_services = valid_services + " " + service 
  msg = """
Usage: %(program)s --<action> <service>  --ini <ini_file> [--ssh]

  action: install, start, stop, status 
  services: %(services)s  
            all - can only be used with start/stop/status actions

This process can be used to install, start, stop or check the status of the 
glidein services based on the configuration in the specified ini file.

The '--ssh' argument allows the start/stop/status actions to be performed 
remotely providing the user has valid access to the other service's node via 
'ssh -l' using the service's username.

The install/install-node/create-entries can only be used on the node for that
service. 

 %(program)s --install-node --ini <ini_file>

This option  allows you to install all services for the node you are installing
on.  There are some limitation to this.

Factory only
------------
 %(program)s --create-entries --ini <ini_file>

This option can be used to select new glidein entry points after the
initial installation of a factory service.  If will walk you through the same 
question and answer process querying ReSS and BDII for resources.  
It will then create a file containing the entry elements for those selected.  
This can then be merged with the existing Factory configuration file. 

VOFrontend only
---------------
 %(program)s --create-group --ini <ini_file>
This option can be used to add a new frontend group after the
initial installation of a frontend service.  If will walk you through the same 
question and answer process for selection criteria.  
It will then create a file containing the necessary group elements.  
This can then be merged with the existing frontend configuration file. 

ini file only
---------------
 %(program)s --show-ini <ini_file>
This option allows you to view the ini file options/values. This is especially useful
when the DEFAULT section is used to apply values to all sections/services.
""" % \
{ "program"  : os.path.basename(gProgramName),
  "services" : valid_services,
}
  common.logit(msg)

##########################################
def main(argv):
  try:
    global gProgramName
    global gAction
    global gSSH

    gProgramName = argv[0]
    gAction = None
    gSSH    = False
    inifile = ""
    arglist = [ "help", "start=", "stop=", "status=", "install=","ini=","show-ini=","create-entries","create-group","install-node","ssh" ]
    services = ["wmscollector","usercollector","factory","submit","vofrontend"]
    stop_order = ["vofrontend","submit","factory","usercollector","wmscollector"]
    opts, args = getopt.getopt(argv[1:], "", arglist)
    if len(opts) == 0:
      usage(services)
      common.logerr("No command line arguments specified")

    for o, a in opts:
      if o in ("--help"):
        usage(services)
        return 1

      if o in ("--ini"):
        inifile = a
        if not os.path.isfile(inifile):
          common.logerr("ini file does not exist: %s" % inifile)
        continue

      if o in ("--show-ini"):
        gAction = o[2:]
        inifile = a
        if not os.path.isfile(inifile):
          common.logerr("ini file does not exist: %s" % inifile)
        continue

      if o == "--install-node":
        gAction = o[2:]
        continue

      if o == "--ssh":
        gSSH = True
        continue

      if o == "--create-entries":
        gAction = o[2:]
        continue

      if o == "--create-group":
        gAction = o[2:]
        continue

      if o in ("--start","--stop","--status","--install"):
        gAction = o[2:]
        if a == "all":
          if o == "--stop":
            services = stop_order
          continue

        if a in services:
          services = [a,]
          continue
        usage(services)
        common.logerr("Invalid service: %s" % a)
    #--- end of options --

    if gAction == None and len(inifile) == 0:
      usage(services)
      common.logerr("Missing all command line  arguments")

    if len(inifile) == 0:
      usage(services)
      common.logerr("--ini argument is required")

    if gAction == None:
      usage(services)
      common.logerr("Missing the 'action' argument")

    if gAction not in ["start","stop","status",]:
      if gSSH:
        usage(services)
        common.logerr("The --ssh argument can only be used with --start, --stop, --status arguments.")

    if gAction == "install-node":
      services = find_services(inifile)
      gAction = "install"

    if gAction == "create-entries":
      services = ["factory",]

    if gAction == "create-group":
      services = ["vofrontend",]

    if gAction == "show-ini":
      services = []  # skips the for loop for service actions
      ini = Configuration.Configuration(inifile)
      print ini

    installed_services = 0
    for service in services:        
      try:
        installed_services = installed_services + 1
        common.logit("----- %s ----" % (service))
        process_request(service,gAction,inifile)
      except common.WMSerror:
        raise
      except:
        raise
      if len(services) <> installed_services:
        common.ask_continue("... continue with next service")
  
    common.logit("... requested action completed")

  except getopt.error, e:
    msg = e.__str__()
    common.logit("ERROR: Invalid command line argument: %s" % msg)
    usage(services)
    return 1
  except KeyboardInterrupt, e:
    print;print "Termminating at your request";return 1
  except EOFError, e:
    print;print "Termminating at your request";return 1
  except ConfigurationError, e:
    print;print "ConfigurationError ERROR(should not get these): %s"%e
    print traceback.print_exc()
    return 1
  except common.WMSerror:
#    print "WMS ERROR: uncaught execption. Contact support"
#    print traceback.print_exc()
    return 1
  except:
    print "PROGRAM ERROR: uncaught execption. Contact support"
    print traceback.print_exc()
    return 1
  return 0


#--------------------------
if __name__ == '__main__':
  sys.exit(main(sys.argv))

